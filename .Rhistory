tryCatch(formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+"))),
error = stop("Verifique se as colunas selecionadas estão no banco de dados inserido.
Também verifique se estão escritas corretamente. Lembre-se de colocá-las entre \"aspas\".")
)
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "Length2"))
matriz_delineamento <- function(dados, variaveis) {
tryCatch(formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+"))),
error = function(e) {stop("Verifique se as colunas selecionadas estão no banco de dados inserido.
Também verifique se estão escritas corretamente. Lembre-se de colocá-las entre \"aspas\".")
})
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "Length2"))
betas(peixes, "Weight", c("Length1", "Length2"))
betas(peixes, "Weight", c("Length1", "a"))
matriz_delineamento <- function(dados, variaveis) {
formula_ <- tryCatch({as.formula(paste0("~",
paste(variaveis, collapse = "+")))},
error = function(e) {stop("Verifique se as colunas selecionadas estão no banco de dados inserido.
Também verifique se estão escritas corretamente. Lembre-se de colocá-las entre \"aspas\".")
})
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a"))
betas(peixes, "Weight", c("Length1", "Length2"))
matriz_delineamento <- function(dados, variaveis) {
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "Length2"))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(colnames(dados),
variaveis)) > 0) {
stop(paste("As seguintes variáveis não estão presentes no banco de dados: ",
setdiff(colnames(dados),variaveis)))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a"))
betas(peixes, "Weight", c("Length1", "a", "b"))
betas(peixes, "Weight", c("Length1", "a", "b"))
betas(peixes, "Weight", c("Length1", "a", "b"))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(colnames(dados),
variaveis)) > 0) {
stop(paste("As seguintes variáveis não estão presentes no banco de dados: ",
paste(setdiff(colnames(dados),variaveis),
collapse = "\n")))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a", "b"))
setdiff(peies, c("a"))
setdiff(peixes, c("a"))
setdiff(colnames(peixes), c("a"))
setdiff(colnames(peixes), c("a", "b"))
setdiff(c("a", "b"), colnames("peixes"))
setdiff(c("Species"), colnames("peixes"))
setdiff(c("Species"), colnames(peixes))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(variaveis,
colnames(dados)
)
) > 0) {
stop(paste("As seguintes variáveis não estão presentes no banco de dados: ",
paste(setdiff(variaveis, colnames(dados)),
collapse = "\n")))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a", "b"))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(variaveis,
colnames(dados)
)
) > 0) {
stop(paste("As seguintes variáveis não estão presentes no banco de dados:\n",
paste(setdiff(variaveis, colnames(dados)),
collapse = "\n")))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a", "b"))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(variaveis,
colnames(dados)
)
) > 0) {
stop(paste0("As seguintes variáveis não estão presentes no banco de dados:\n",
paste(setdiff(variaveis, colnames(dados)),
collapse = "\n"),
"Verifique se estão no banco de dados e escritas corretamente."))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a", "b"))
betas(peixes, "Weight", c("Length1", "a", "b"))
matriz_delineamento <- function(dados, variaveis) {
if (length(setdiff(variaveis,
colnames(dados)
)
) > 0) {
stop(paste0("As seguintes variáveis não estão presentes no banco de dados:\n",
paste(setdiff(variaveis, colnames(dados)),
collapse = "\n"),
"\nVerifique se estão no banco de dados e escritas corretamente."))
}
formula_ <- as.formula(paste0("~",
paste(variaveis, collapse = "+")))
matriz_ <- model.matrix(formula_,
data = dados)
return(matriz_)
}
betas(peixes, "Weight", c("Length1", "a", "b"))
?betas
devtools::document()
?betas
devtools::document()
?betas
devtools::document()
?betas
devtools::document()
devtools::document()
betas
?betas
devtools::document()
?residuos
devtools::document()
?residuos
devtools::document()
devtools::document()
devtools::document()
?peixes
?valores_preditos
?predicao
devtools::load_all(".")
betas(peixes, "Weight", c("Length1", "a", "b"))
betas(peixes, "Weight", c("Length1", "a", "b"))
betas(peixes, "Weight", c("Length1", "Length2"))
betas(proj2::peixes, "Weight", c("Length1", "Length2"))
predito_observado(proj2::peixes, "Weight", c("Length1", "Length2"))
predito_observado(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qme(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qme(proj2::peixes, "Weight", c("Length1", "Length2"))
objeto <- lm(data = proj2::peixes, Weight ~ Length1 + Length2)
objeto %>% anova
library(magrittr)
objeto %>% anova
function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
qme <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
sum(
(residuos(dados,
variavel_resposta,
variaveis_preditoras))^2
)/(nrow(dados)-(1+length(variaveis_preditoras)))
)
}
qme(proj2::peixes, "Weight", c("Length1", "Length2"))
)
qme(proj2::peixes, "Weight", c("Length1", "Length2"))
qme <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
sum(
(residuos(dados,
variavel_resposta,
variaveis_preditoras))^2
)/(nrow(dados)-(1+length(variaveis_preditoras)))
)
}
qme(proj2::peixes, "Weight", c("Length1", "Length2"))
objeto %>% anova
semi_studentizado <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
residuos(dados,
variavel_resposta,
variaveis_preditoras)/sqrt(qme(dados,
variavel_resposta,
variaveis_preditoras))
)
}
semi_studentizado(proj2::peixes, "Weight", c("Length1", "Length2"))
matriz_chapeu <- function(dados,
variaveis_preditoras) {
x_ <- matriz_delineamento(dados = dados,
variaveis = variaveis_preditoras)
if (det(t(x_) %*% x_) == 0) {
stop("Matriz não tem posto completo. Retire algumas das variáveis e tente novamente.")
}
return(
x_ %*% solve(t(x_) %*% x_) %*% t(x_)
)
}
matriz_chapeu(proj2::peixes, c("Length1", "Length2"))
matriz_chapeu(proj2::peixes, c("Length1", "Length2")) %>% diag
studentizado <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
residuos(dados,
variavel_resposta,
variaveis_preditoras)/sqrt(qme(dados,
variavel_resposta,
variaveis_preditoras)*(1-diag(matriz_chapeu(dados,
variaveis_preditoras))))
)
}
studentizado(proj2::peixes, "Weight", c("Length1", "Length2"))
studentizado(proj2::peixes, "Weight", c("Length1", "Length2")) %>% head
semi_studentizado(proj2::peixes, "Weight", c("Length1", "Length2")) %>% head
objeto
plot(objeto)
variaveis_preditoras,
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizados(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq() +
labs(title = "Comparação de quantis com a distribuição normal padrão, QQ-Norm"
x = "Quantis teóricos",
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizados(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq() +
labs(title = "Comparação de quantis com a distribuição normal padrão, QQ-Norm",
x = "Quantis teóricos",
y = "Resíduos studentizados")
return(grafico_)
}
predito_observado(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq() +
labs(title = "Comparação de quantis com a distribuição normal padrão, QQ-Norm",
x = "Quantis teóricos",
y = "Resíduos studentizados")
return(grafico_)
}
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão, QQ-Norm",
x = "Quantis teóricos",
y = "Resíduos studentizados")
return(grafico_)
}
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão\n(QQ-Norm)",
x = "Quantis teóricos",
y = "Resíduos studentizados")
return(grafico_)
}
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
quantis_normais <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão\n(QQ-Norm)",
x = "Quantis teóricos",
y = "Resíduos studentizados") +
theme_classic()
if (reta) {
grafico_ <- grafico_ +
stat_qq_line(aes(sample = residuo))
}
return(grafico_)
}
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qq_residuos <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão\n(QQ-Norm)",
x = "Quantis teóricos",
y = "Resíduos studentizados") +
theme_classic()
if (reta) {
grafico_ <- grafico_ +
stat_qq_line(aes(sample = residuo))
}
return(grafico_)
}
quantis_normais(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qq_residuos <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão\n(QQ-Norm)",
x = "Quantis teóricos",
y = "Resíduos studentizados") +
theme_classic()
if (reta) {
grafico_ <- grafico_ +
stat_qq_line()
}
return(grafico_)
}
qq_residuos(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qq_residuos(proj2::peixes, "Weight", c("Length1", "Length2"), reta = TRUE)
qq_residuos <- function(dados,
variavel_resposta,
variaveis_preditoras,
reta = TRUE) {
library(ggplot2)
residuos_ <- data.frame(residuo = studentizado(dados, variavel_resposta, variaveis_preditoras))
grafico_ <- ggplot(residuos_) +
stat_qq(aes(sample = residuo)) +
labs(title = "Comparação de quantis com a distribuição normal padrão\n(QQ-Norm)",
x = "Quantis teóricos",
y = "Resíduos studentizados") +
theme_classic()
if (reta) {
grafico_ <- grafico_ +
stat_qq_line(aes(sample = residuo))
}
return(grafico_)
}
qq_residuos(proj2::peixes, "Weight", c("Length1", "Length2"), reta = FALSE)
qq_residuos(proj2::peixes, "Weight", c("Length1", "Length2"), reta = TRUE)
alavanca <- function(dados,
variaveis_preditoras) {
return(
diag(
matriz_chapeu(dados,
variaveis_preditoras)
)
)
}
alavanca(proj2::peixes, c("Length1", "Length2"))
leverage(objeto)
hatvalues(objeto)
r2 <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
1 - (qme(dados,
variavel_resposta,
variaveis_preditoras)*(nrow(dados)-length(variaveis_preditoras))/((nrow(dados)-1)*var(variavel_resposta)))
)
}
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
r2 <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
1 - (qme(dados,
variavel_resposta,
variaveis_preditoras)*(nrow(dados)-length(variaveis_preditoras))/((nrow(dados)-1)*var(dados[[variavel_resposta]])))
)
}
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
objeto %>% summary
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
r2 <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
1 - (qme(dados,
variavel_resposta,
variaveis_preditoras)*(nrow(dados)-(1+length(variaveis_preditoras))/((nrow(dados)-1)*var(dados[[variavel_resposta]])))
)
}
r2 <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
1 - (qme(dados,
variavel_resposta,
variaveis_preditoras)*(nrow(dados)-(1+length(variaveis_preditoras)))/((nrow(dados)-1)*var(dados[[variavel_resposta]])))
)
}
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
objeto %>% summary
r2(proj2::peixes, "Weight", c("Length1", "Length2"))
r2_ajustado <- function(dados,
variavel_resposta,
variaveis_preditoras) {
return(
1 - (qme(dados,
variavel_resposta,
variaveis_preditoras)/(var(dados[[variavel_resposta]])))
)
}
objeto %>% summary
r2_ajustado(proj2::peixes, "Weight", c("Length1", "Length2"))
aic_do_modelo <- function(dados,
variavel_resposta,
variaveis_preditoras,
penalizacao = 2,
bayesiano = FALSE) {
n_ <- nrow(dados)
if (bayesiano) {
penalizacao <- log(n_)
}
return(
n_*log( (n_ -(1+length(variaveis_preditoras)))*qme(dados,
variavel_resposta,
variaveis_preditoras) - n_*log(n_) + log(n_)*(1+length(variaveis_preditoras)))
)
}
aic(proj2::peixes, "Weight", c("Length1", "Length2"))
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"))
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 3)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 4)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 7)
aic_do_modelo <- function(dados,
variavel_resposta,
variaveis_preditoras,
penalizacao = 2,
bayesiano = FALSE) {
n_ <- nrow(dados)
if (bayesiano) {
penalizacao <- log(n_)
}
return(
n_*log( (n_ -(1+length(variaveis_preditoras)))*qme(dados,
variavel_resposta,
variaveis_preditoras) - n_*log(n_) + penalizacao*(1+length(variaveis_preditoras)))
)
}
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 7)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 2)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 7)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 70)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 0)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2"), penalizacao = 1)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2", "Status"), penalizacao = 1)
head(proj2::peixes)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2", "Species"), penalizacao = 1)
aic_do_modelo(proj2::peixes, "Weight", c("Length1", "Length2", "Species"), penalizacao = 5)
